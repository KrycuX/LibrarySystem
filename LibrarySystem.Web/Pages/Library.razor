@page "/"
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http

<PageTitle>Library</PageTitle>

<h1>Books</h1>


@if (Paginated == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <button class="btn btn-success" @onclick="OpenAddBookModal">Add Book</button>
    <table class="table">
        <thead>
            <tr><th></th>
                <th @onclick="()=>SortBooks(SortByEnum.ISBN)">ISBN @GetSortIndicator(SortByEnum.ISBN)</th>
                <th @onclick="()=> SortBooks(SortByEnum.Title)">Title @GetSortIndicator(SortByEnum.Title)</th>
                <th @onclick="()=>SortBooks(SortByEnum.Author)">Author @GetSortIndicator(SortByEnum.Author)</th>
                <th >Shelf Location </th>               
                <th @onclick="()=>SortBooks(SortByEnum.Status)">Status @GetSortIndicator(SortByEnum.Status)</th>
                <th>Action </th>
                <th>Remove</th>

            </tr>
        </thead>
        <tbody>
            @if (Paginated.Items != null)
            {
                @foreach (var book in Paginated.Items)
                {
                    <tr>
                        <td><button class="btn btn-warning" @onclick="() => OpenEditBookModal(book)">Edit</button></td>
                        <td>@book.ISBN</td>
                        <td>@book.Title</td>
                        <td>@book.Author</td>
                        <td>@book.ShelfLocation</td>
                        <td>@book.Status</td>
                        <td>
                            @if (book.Status is BookStatusDto.OnShelf)
                            {
                                <button class="btn btn-primary" @onclick="() => BorrowBook(book.Id)">Borrow</button>
                            }else
                            @if (book.Status is  BookStatusDto.Borrowed) 
                            {
                                <button class="btn btn-primary" @onclick="() => ReturnBook(book.Id)">Return</button>
                            }
                            else
                            @if (book.Status is (BookStatusDto.Damaged or BookStatusDto.Returned))
                            {
                                <button class="btn btn-primary" @onclick="() => ShelveBook(book.Id)">Shelve</button>
                            }

                        </td>


                        <td>
                            <button class="btn btn-danger" @onclick="() => DeleteBook(book.Id)" disabled="@(book.Status != BookStatusDto.OnShelf)">
                                Remove
                            </button>
                        </td>
                    </tr>
                }  
            }

        </tbody>
    </table>
    <div>
        <button @onclick="PreviousPage" disabled="@(!HasPreviousPage)">Previous</button>
        <span>Page @Paginated.Page of @Paginated.TotalPages</span>
        <button @onclick="NextPage" disabled="@(!HasNextPage)">Next</button>
    </div>

}
@if (IsModalOpen)
{
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(IsEditing ? "Edit Book" : "Add Book")</h5>
                    <button type="button" class="close" @onclick="CloseModal">&times;</button>
                </div>
                <div class="modal-body">
                    <EditForm Model="BookForm" OnValidSubmit="SaveBook">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="form-group">
                            <label>ISBN</label>
                            <InputText class="form-control" @bind-Value="BookForm.ISBN" />
                            <ValidationMessage For="() => BookForm.ISBN" />
                        </div>

                        <div class="form-group">
                            <label>Title</label>
                            <InputText class="form-control" @bind-Value="BookForm.Title" />
                            <ValidationMessage For="() => BookForm.Title" />
                        </div>

                        <div class="form-group">
                            <label>Author</label>
                            <InputText class="form-control" @bind-Value="BookForm.Author" />
                            <ValidationMessage For="() => BookForm.Author" />
                        </div>

                        <div class="form-group">
                            <label>Shelf Location</label>
                            <InputText class="form-control" @bind-Value="BookForm.ShelfLocation" />
                            <ValidationMessage For="() => BookForm.ShelfLocation" />
                        </div>

                        <button type="submit" class="btn btn-primary">Save</button>
                        <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}
@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}
@code {
    private int pageNumber = 1;
    private int pageSize = 10;

    private SortByEnum sortBy = SortByEnum.ISBN; 
    private bool sortDescending = false;

    private PaginatedResult<BookDto>? Paginated;

    private bool HasPreviousPage => pageNumber > 1;
    private bool HasNextPage => pageNumber < Paginated?.TotalPages;

    private bool IsModalOpen = false;
    private bool IsError = false;
    private bool IsEditing = false;
    private BookFormModel BookForm = new();
    private EditContext? EditContext;
    string? ErrorMessage;
    protected override async Task OnInitializedAsync()
    {
        await LoadPageAsync();
    }
    private async Task LoadPageAsync()
    {
        // Pobierz dane z API, z uwzględnieniem stronicowania
        var response = await Http.GetFromJsonAsync<ApiResponse<PaginatedResult<BookDto>>>($"api/Book/GetBooks?page={pageNumber}&pageSize={pageSize}&sortBy={sortBy}&descending={sortDescending}");
        if (response?.IsSucceed == true && response.Model != null)
            Paginated = response.Model;

    }
    private async Task NextPage()
    {
        if (HasNextPage)
        {
            pageNumber++;
            await LoadPageAsync();
        }
    }

    private async Task PreviousPage()
    {
        if (HasPreviousPage)
        {
            pageNumber--;
            await LoadPageAsync();
        }
    }
    private async Task SortBooks(SortByEnum criteria)
    {
        if (sortBy == criteria)
        {
            sortDescending = !sortDescending;
        }
        else
        {
            sortBy = criteria;
            sortDescending = false;
        }

        await LoadPageAsync();
    }

    private string GetSortIndicator(SortByEnum criteria)
    {
        if (sortBy != criteria)
            return string.Empty;

        return sortDescending ? "↓" : "↑";
    }

    private async Task BorrowBook(Guid id)
    {
        var response = await Http.PutAsJsonAsync($"api/Book/BorrowBook?id={id}", "Użytkownik");
        if (response.IsSuccessStatusCode)
        {
            await LoadPageAsync();
        }
    }

    private async Task ReturnBook(Guid id)
    {
        var response = await Http.PutAsync($"api/Book/ReturnBook?id={id}", null);
        if (response.IsSuccessStatusCode)
        {
            await LoadPageAsync();
        }
    }

    private async Task DeleteBook(Guid id)
    {
        var response = await Http.DeleteAsync($"api/Book/DeleteBook?id={id}");
        if (response.IsSuccessStatusCode)
        {
            await LoadPageAsync();
        }
    }
    private async Task ShelveBook(Guid id)
    {
        var response = await Http.PutAsJsonAsync($"api/Book/ShelveBook?id={id}", "A1");
        if (response.IsSuccessStatusCode)
        {
            await LoadPageAsync();
        }
    }
    private void OpenAddBookModal()
    {

        IsEditing = false;
        BookForm = new BookFormModel();
        EditContext = new EditContext(BookForm);
        IsModalOpen = true;
    }

    private void OpenEditBookModal(BookDto book)
    {
        BookForm = new BookFormModel
            {
                Id = book.Id,
                Title = book.Title,
                Author = book.Author,
                ISBN = book.ISBN,
                ShelfLocation = book.ShelfLocation
            };
        IsEditing = true;
        EditContext = new EditContext(BookForm);
        IsModalOpen = true;
    }

    private async Task SaveBook()
    {
        if (IsEditing)
        {
            var command = new UpdateBookCommand
                {
                    Id = BookForm.Id,
                    Title = BookForm.Title,
                    Author = BookForm.Author,
                    ISBN = BookForm.ISBN,
                    ShelfLocation = BookForm.ShelfLocation ?? string.Empty
                };
            var response = await Http.PutAsJsonAsync("api/Book/UpdateBook", command);
            if (!response.IsSuccessStatusCode)
            {
                var errorResponse = await response.Content.ReadFromJsonAsync<ApiResponse>();
                ErrorMessage = errorResponse?.Message ?? "An error occurred.";
            }
        }
        else
        {
            var command = new CreateBookCommand
            {
                    Title = BookForm.Title,
                    Author = BookForm.Author,
                    ISBN = BookForm.ISBN,
                    ShelfLocation = BookForm.ShelfLocation ?? string.Empty
            };
            var response = await Http.PostAsJsonAsync("api/Book/CreateBook", command);
            if (!response.IsSuccessStatusCode)
            {
                var errorResponse = await response.Content.ReadFromJsonAsync<ApiResponse<BookDto>>();
                ErrorMessage = errorResponse?.Message ?? "An error occurred.";
            }
        }
        IsModalOpen = false;
        await LoadPageAsync();
    }

    private void CloseModal()
    {
        IsModalOpen = false;
    }

    public class ApiResponse<T>
    {
        public bool IsSucceed { get; set; }
        public T Model { get; set; }
        public string Message { get; set; }
        public string Ex { get; set; }
    }
    public class ApiResponse
    {
        public bool IsSucceed { get; set; }
        public string Message { get; set; }
        public string Ex { get; set; }
    }
    public class BookFormModel
    {
        public Guid Id { get; set; }
        [Required] public string ISBN { get; set; } = string.Empty;
        [Required] public string Title { get; set; } = string.Empty;
        [Required] public string Author { get; set; } = string.Empty;
        [Required] public string ShelfLocation { get; set; } = string.Empty;
    }
}
